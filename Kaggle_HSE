{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/SlavikHom/Learning/blob/main/Kaggle_HSE\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "H211VO45y3re"
      },
      "source": [
        "<small><font color=gray>Notebook author: <a href=\"https://www.linkedin.com/in/olegmelnikov/\" target=\"_blank\">Oleg Melnikov</a>\n",
        "\n",
        "**[<font size=6>üí≥Mr. and Mrs. Client (MaMC)</font>](https://www.kaggle.com/competitions/26jun23/rules)**. [**Instructions**](https://colab.research.google.com/drive/1riOGrE_Fv-yfIbM5V4pgJx4DWcd92cZr#scrollTo=ITaPDPIQEgXV) for running Colabs."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "B9WbQS1vzgf5"
      },
      "source": [
        "<small>**(Optional) CONSENT.** <mark>[ X ]</mark> We consent to sharing our Colab (after the assignment ends) with other students/instructors for educational purposes. We understand that sharing is optional and this decision will not affect our grade in any way. <font color=gray><i>(If ok with sharing your Colab for educational purposes, leave \"X\" in the check box.)</i></font></small>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 2,
      "metadata": {
        "id": "CT3dcYSxxx_K"
      },
      "outputs": [],
      "source": [
        "# from google.colab import drive; drive.mount('/content/drive')   # OK to enable, if your kaggle.json is stored in Google Drive"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 3,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "FuKXMRjsyxoK",
        "outputId": "a207b3e6-030e-4f3e-beb4-0289cf2fd1cb"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "cp: cannot stat '/content/drive/MyDrive/kaggle.json': No such file or directory\n",
            "- competition is now set to: 26jun23\n",
            "100% 35.7M/35.7M [00:01<00:00, 19.1MB/s]\n",
            "Using competition: 26jun23\n",
            "  teamId  teamName                       submissionDate       score    \n",
            "--------  -----------------------------  -------------------  -------  \n",
            "10612706  Michael Kondrashov             2023-06-30 12:58:01  0.88424  \n",
            "10612695  Logistic Depression [12]       2023-06-30 12:39:10  0.88402  \n",
            "10614699  Dmitriy Geyzha                 2023-06-30 11:59:52  0.87769  \n",
            "10616508  Z–∞ –ëV–ò [8]                     2023-06-30 12:24:49  0.87710  \n",
            "10614521  Konstantin Zeigman             2023-06-30 11:37:17  0.87691  \n",
            "10617156  Team 5                         2023-06-30 11:08:02  0.87355  \n",
            "10618717  Team1                          2023-06-30 12:29:16  0.87097  \n",
            "10613713  Mikhail Vovk –ö–æ–º–∞–Ω–¥–∞ 2         2023-06-30 12:51:52  0.86555  \n",
            "10612703  –ü–µ–ª—å–º–µ–Ω–∏ [14]                  2023-06-30 11:44:45  0.85912  \n",
            "10618350  –°–í–ë[2]                         2023-06-29 21:13:06  0.85792  \n",
            "10623729  –ê—Ä—Ç—ë–º –ì—É–π–≤–∞–Ω                   2023-06-30 12:15:33  0.85374  \n",
            "10617279  Alex Rasskazchikov             2023-06-30 12:44:50  0.85111  \n",
            "10626468  Sonya Ryabova                  2023-06-30 11:59:46  0.83720  \n",
            "10612716  Luka Duvanov & Fedorova Maria  2023-06-30 11:13:44  0.81829  \n",
            "10617114  Team77                         2023-06-30 12:50:06  0.77979  \n",
            "10612789  Liz_Margo_Mila 6               2023-06-30 11:44:42  0.77463  \n",
            "10620827  Name_7                         2023-06-30 12:58:40  0.74947  \n",
            "10622182  Q                              2023-06-30 12:55:24  0.70575  \n",
            "10614297  –ì–£–°–ò                           2023-06-30 11:09:38  0.69533  \n",
            "10605413  üí≥baseline,LR:$Stat+MCCEnc      2023-06-25 18:15:10  0.53220  \n"
          ]
        }
      ],
      "source": [
        "!pip -q install --upgrade --force-reinstall --no-deps kaggle > log  # upgrade kaggle package (to avoid a warning)\n",
        "!mkdir -p ~/.kaggle                                           # .kaggle folder must contain kaggle.json for kaggle executable to properly authenticate you to Kaggle.com\n",
        "!cp /content/drive/MyDrive/kaggle.json ~/.kaggle/kaggle.json >log  # First, download kaggle.json from kaggle.com (in Account page) and place it in the root of mounted Google Drive\n",
        "!cp kaggle.json ~/.kaggle/kaggle.json > log                   # Alternative location of kaggle.json (without a connection to Google Drive)\n",
        "!chmod 600 ~/.kaggle/kaggle.json                              # give only the owner full read/write access to kaggle.json\n",
        "!kaggle config set -n competition -v 26jun23                  # set the competition context for the next few kaggle API calls. !kaggle config view - shows current settings\n",
        "!kaggle competitions download >> log                          # download competition dataset as a zip file\n",
        "!unzip -o *.zip >> log                                        # Kaggle dataset is copied as a single file and needs to be unzipped.\n",
        "!kaggle competitions leaderboard --show                       # print public leaderboard"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 4,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "lOhT2o18yxld",
        "outputId": "fd254c2b-141e-4572-a643-e762e7cf6565"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "CPU times: user 7.47 s, sys: 967 ms, total: 8.43 s\n",
            "Wall time: 1min 5s\n"
          ]
        }
      ],
      "source": [
        "%%time\n",
        "%%capture\n",
        "%reset -f\n",
        "!pip install -U sentence-transformers tfds-nightly tensorflow tensorflow_addons plotly > log\n",
        "from IPython.core.interactiveshell import InteractiveShell as IS; IS.ast_node_interactivity = \"all\"  # allows multiple prints from a cell\n",
        "import numpy as np, pandas as pd, time, matplotlib.pyplot as plt, os, plotly.express as px, xgboost as xgb, lightgbm, re, tensorflow as tf, tensorflow.keras as keras\n",
        "from sklearn.preprocessing import MinMaxScaler, PolynomialFeatures\n",
        "from sklearn.model_selection import train_test_split, GroupKFold\n",
        "from sklearn.linear_model import LogisticRegression as LR\n",
        "from sklearn.metrics import roc_auc_score\n",
        "from sklearn.decomposition import PCA\n",
        "from sklearn.neural_network import MLPClassifier   # SKLearn's MLP is optimised for CPU (and doesn't use GPU)\n",
        "from sentence_transformers import SentenceTransformer as SBERT\n",
        "from keras.layers import Flatten, Dense\n",
        "\n",
        "os.environ['TF_DETERMINISTIC_OPS'] = '1'; os.environ['TF_CUDNN_DETERMINISTIC'] = '1'   # helps to seed TF's RNG on GPUs\n",
        "np.set_printoptions(linewidth=10000, precision=2, edgeitems=20, suppress=True)\n",
        "pd.set_option('display.max_colwidth', 100, 'display.max_columns', 10, 'display.width', 1000, 'display.max_rows', 8)\n",
        "\n",
        "class Timer():\n",
        "  def __init__(self, lim:'RunTimeLimit'=60*3): self.t0, self.lim, _ = time.time(), lim, print(f'‚è≥ started. You have {lim} sec. Good luck!')\n",
        "  def ShowTime(self):\n",
        "    msg = f'Runtime is {time.time()-self.t0:.0f} sec'\n",
        "    print(f'\\033[91m\\033[1m' + msg + f' > {self.lim} sec limit!!!\\033[0m' if (time.time()-self.t0-1) > self.lim else msg)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 5,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 297
        },
        "id": "Y6jdIdKjpTpT",
        "outputId": "38e32ab9-968b-4601-ac94-39366551bcb5"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "CPU times: user 7.03 ms, sys: 0 ns, total: 7.03 ms\n",
            "Wall time: 24.5 ms\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "mcc                   0                                                                    1                            2                                                                            3                                         4    ...                                                    179     180                181                                                        182                                     183\n",
              "desc  –í–µ—Ç–µ—Ä–∏–Ω–∞—Ä–Ω—ã–µ —É—Å–ª—É–≥–∏  –ì–µ–Ω–µ—Ä–∞–ª—å–Ω—ã–µ –ø–æ–¥—Ä—è–¥—á–∏–∫–∏ –ø–æ –≤–µ–Ω—Ç–∏–ª—è—Ü–∏–∏, —Ç–µ–ø–ª–æ—Å–Ω–∞–±–∂–µ–Ω–∏—é, –∏ –≤–æ–¥–æ–ø—Ä–æ–≤–æ–¥—É  –ü–æ–¥—Ä—è–¥—á–∏–∫–∏ –ø–æ —ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å—Ç–≤—É  –ü–æ–¥—Ä—è–¥—á–∏–∫–∏, —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ç–æ—Ä–≥–æ–≤–ª—è ‚Äî –Ω–∏–≥–¥–µ –±–æ–ª–µ–µ –Ω–µ –∫–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ  –†–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω—ã–µ –∏–∑–¥–∞—Ç–µ–ª—å—Å—Ç–≤–∞/–ø–µ—á–∞—Ç–Ω–æ–µ –¥–µ–ª–æ  ...  –°—É–¥–æ–≤—ã–µ –≤—ã–ø–ª–∞—Ç—ã, –≤–∫–ª—é—á–∞—è –∞–ª–∏–º–µ–Ω—Ç—ã –∏ –¥–µ—Ç—Å–∫—É—é –ø–æ–¥–¥–µ—Ä–∂–∫—É  –®—Ç—Ä–∞—Ñ—ã  –ù–∞–ª–æ–≥–æ–≤—ã–µ –ø–ª–∞—Ç–µ–∂–∏  –ü—Ä–∞–≤–∏—Ç–µ–ª—å—Å—Ç–≤–µ–Ω–Ω—ã–µ —É—Å–ª—É–≥–∏, –Ω–∏–≥–¥–µ —Ä–∞–Ω–µ–µ –Ω–µ –∫–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä—É–µ–º—ã–µ  –ü–æ—á—Ç–æ–≤—ã–µ —É—Å–ª—É–≥–∏ ‚Äî —Ç–æ–ª—å–∫–æ –ø—Ä–∞–≤–∏—Ç–µ–ª—å—Å—Ç–≤–æ\n",
              "\n",
              "[1 rows x 184 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-691a1fd4-c33f-4fc2-bf8e-44e56b25bb38\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th>mcc</th>\n",
              "      <th>0</th>\n",
              "      <th>1</th>\n",
              "      <th>2</th>\n",
              "      <th>3</th>\n",
              "      <th>4</th>\n",
              "      <th>...</th>\n",
              "      <th>179</th>\n",
              "      <th>180</th>\n",
              "      <th>181</th>\n",
              "      <th>182</th>\n",
              "      <th>183</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>desc</th>\n",
              "      <td>–í–µ—Ç–µ—Ä–∏–Ω–∞—Ä–Ω—ã–µ —É—Å–ª—É–≥–∏</td>\n",
              "      <td>–ì–µ–Ω–µ—Ä–∞–ª—å–Ω—ã–µ –ø–æ–¥—Ä—è–¥—á–∏–∫–∏ –ø–æ –≤–µ–Ω—Ç–∏–ª—è—Ü–∏–∏, —Ç–µ–ø–ª–æ—Å–Ω–∞–±–∂–µ–Ω–∏—é, –∏ –≤–æ–¥–æ–ø—Ä–æ–≤–æ–¥—É</td>\n",
              "      <td>–ü–æ–¥—Ä—è–¥—á–∏–∫–∏ –ø–æ —ç–ª–µ–∫—Ç—Ä–∏—á–µ—Å—Ç–≤—É</td>\n",
              "      <td>–ü–æ–¥—Ä—è–¥—á–∏–∫–∏, —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Ç–æ—Ä–≥–æ–≤–ª—è ‚Äî –Ω–∏–≥–¥–µ –±–æ–ª–µ–µ –Ω–µ –∫–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ</td>\n",
              "      <td>–†–∞–∑–Ω–æ–æ–±—Ä–∞–∑–Ω—ã–µ –∏–∑–¥–∞—Ç–µ–ª—å—Å—Ç–≤–∞/–ø–µ—á–∞—Ç–Ω–æ–µ –¥–µ–ª–æ</td>\n",
              "      <td>...</td>\n",
              "      <td>–°—É–¥–æ–≤—ã–µ –≤—ã–ø–ª–∞—Ç—ã, –≤–∫–ª—é—á–∞—è –∞–ª–∏–º–µ–Ω—Ç—ã –∏ –¥–µ—Ç—Å–∫—É—é –ø–æ–¥–¥–µ—Ä–∂–∫—É</td>\n",
              "      <td>–®—Ç—Ä–∞—Ñ—ã</td>\n",
              "      <td>–ù–∞–ª–æ–≥–æ–≤—ã–µ –ø–ª–∞—Ç–µ–∂–∏</td>\n",
              "      <td>–ü—Ä–∞–≤–∏—Ç–µ–ª—å—Å—Ç–≤–µ–Ω–Ω—ã–µ —É—Å–ª—É–≥–∏, –Ω–∏–≥–¥–µ —Ä–∞–Ω–µ–µ –Ω–µ –∫–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä—É–µ–º—ã–µ</td>\n",
              "      <td>–ü–æ—á—Ç–æ–≤—ã–µ —É—Å–ª—É–≥–∏ ‚Äî —Ç–æ–ª—å–∫–æ –ø—Ä–∞–≤–∏—Ç–µ–ª—å—Å—Ç–≤–æ</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>1 rows √ó 184 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-691a1fd4-c33f-4fc2-bf8e-44e56b25bb38')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-691a1fd4-c33f-4fc2-bf8e-44e56b25bb38 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-691a1fd4-c33f-4fc2-bf8e-44e56b25bb38');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 5
        }
      ],
      "source": [
        "%time mcc = pd.read_csv('_mcc.csv', index_col='mcc'); mcc.T  # load merchant category codes (MCC)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 6,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 312
        },
        "id": "Ub5j-lxzpzoz",
        "outputId": "3d225a40-ee5a-4743-9046-7fdcb0b91006"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "CPU times: user 3.65 ms, sys: 86 ¬µs, total: 3.73 ms\n",
            "Wall time: 5.8 ms\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "ttc                0                      1                               2                    3                       4    ...                                        150                              151                                                                                                  152                                                                         153  154\n",
              "desc  –ü–æ–∫—É–ø–∫–∞.–¢–£ –°–ë –†–§  –ü–æ–∫—É–ø–∫–∞. POS –¢–£ –°–ë –†–§  –û–ø–ª–∞—Ç–∞ —É—Å–ª—É–≥–∏. –ë–∞–Ω–∫–æ–º–∞—Ç—ã –°–ë –†–§  –ü–æ–∫—É–ø–∫–∞. –¢–£  –†–æ—Å—Å–∏—è  –ü–æ–∫—É–ø–∫–∞. POS –¢–£ –†–æ—Å—Å–∏—è  ...  –£—Ä–µ–≥—É–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –±–µ–∑–Ω–∞–¥–µ–∂–Ω–æ–π –∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç–∏   –ü–ª–∞—Ç–∞ –∑–∞ –ø—Ä–∏–æ—Å—Ç. –¥–µ–π—Å—Ç–≤–∏—è –∫–∞—Ä—Ç—ã  –ü–ª–∞—Ç–∞ –∑–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É —Å—á–µ—Ç–∞ –±–∞–Ω–∫–æ–≤—Å–∫–æ–π –∫–∞—Ä—Ç—ã –∫–ª–∏–µ–Ω—Ç–∞ –ø—Ä–∏ –æ—Å—É—â. –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–π –≤—ã–¥–∞—á–∏...  –ü–ª–∞—Ç–∞ –∑–∞ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –ø–æ –∑–∞–ø—Ä–æ—Å—É –∫–ª–∏–µ–Ω—Ç–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –ø–æ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å –∫–∞—Ä—Ç–æ–π  XXX\n",
              "\n",
              "[1 rows x 155 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-8793efdb-7e33-4ba2-91fa-8bc450d4c5d8\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th>ttc</th>\n",
              "      <th>0</th>\n",
              "      <th>1</th>\n",
              "      <th>2</th>\n",
              "      <th>3</th>\n",
              "      <th>4</th>\n",
              "      <th>...</th>\n",
              "      <th>150</th>\n",
              "      <th>151</th>\n",
              "      <th>152</th>\n",
              "      <th>153</th>\n",
              "      <th>154</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>desc</th>\n",
              "      <td>–ü–æ–∫—É–ø–∫–∞.–¢–£ –°–ë –†–§</td>\n",
              "      <td>–ü–æ–∫—É–ø–∫–∞. POS –¢–£ –°–ë –†–§</td>\n",
              "      <td>–û–ø–ª–∞—Ç–∞ —É—Å–ª—É–≥–∏. –ë–∞–Ω–∫–æ–º–∞—Ç—ã –°–ë –†–§</td>\n",
              "      <td>–ü–æ–∫—É–ø–∫–∞. –¢–£  –†–æ—Å—Å–∏—è</td>\n",
              "      <td>–ü–æ–∫—É–ø–∫–∞. POS –¢–£ –†–æ—Å—Å–∏—è</td>\n",
              "      <td>...</td>\n",
              "      <td>–£—Ä–µ–≥—É–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –±–µ–∑–Ω–∞–¥–µ–∂–Ω–æ–π –∑–∞–¥–æ–ª–∂–µ–Ω–Ω–æ—Å—Ç–∏</td>\n",
              "      <td>–ü–ª–∞—Ç–∞ –∑–∞ –ø—Ä–∏–æ—Å—Ç. –¥–µ–π—Å—Ç–≤–∏—è –∫–∞—Ä—Ç—ã</td>\n",
              "      <td>–ü–ª–∞—Ç–∞ –∑–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É —Å—á–µ—Ç–∞ –±–∞–Ω–∫–æ–≤—Å–∫–æ–π –∫–∞—Ä—Ç—ã –∫–ª–∏–µ–Ω—Ç–∞ –ø—Ä–∏ –æ—Å—É—â. –ø–ª–∞—Ç–µ–∂–Ω–æ–π —Å–∏—Å—Ç–µ–º–æ–π —ç–∫—Å—Ç—Ä–µ–Ω–Ω–æ–π –≤—ã–¥–∞—á–∏...</td>\n",
              "      <td>–ü–ª–∞—Ç–∞ –∑–∞ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –ø–æ –∑–∞–ø—Ä–æ—Å—É –∫–ª–∏–µ–Ω—Ç–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –ø–æ –æ–ø–µ—Ä–∞—Ü–∏–∏ —Å –∫–∞—Ä—Ç–æ–π</td>\n",
              "      <td>XXX</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>1 rows √ó 155 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-8793efdb-7e33-4ba2-91fa-8bc450d4c5d8')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-8793efdb-7e33-4ba2-91fa-8bc450d4c5d8 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-8793efdb-7e33-4ba2-91fa-8bc450d4c5d8');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 6
        }
      ],
      "source": [
        "%time ttc = pd.read_csv('_ttc.csv', index_col='ttc'); ttc.T  # load transaction type codes (TTC)"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 7,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 146
        },
        "id": "5ip8I5XHzYfZ",
        "outputId": "a733c94a-02e7-487b-8491-21f1f48cbc8c"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "CPU times: user 5.46 ms, sys: 58 ¬µs, total: 5.51 ms\n",
            "Wall time: 6.19 ms\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "cid     0     1     2     3     4     ...  8395  8396  8397  8398  8399\n",
              "gender   NaN   NaN   NaN   NaN   NaN  ...   0.0   0.0   1.0   0.0   0.0\n",
              "\n",
              "[1 rows x 8400 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-09aaf0b1-5ea6-4ea9-aba9-455cff85fde1\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th>cid</th>\n",
              "      <th>0</th>\n",
              "      <th>1</th>\n",
              "      <th>2</th>\n",
              "      <th>3</th>\n",
              "      <th>4</th>\n",
              "      <th>...</th>\n",
              "      <th>8395</th>\n",
              "      <th>8396</th>\n",
              "      <th>8397</th>\n",
              "      <th>8398</th>\n",
              "      <th>8399</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>gender</th>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>...</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>1.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>1 rows √ó 8400 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-09aaf0b1-5ea6-4ea9-aba9-455cff85fde1')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-09aaf0b1-5ea6-4ea9-aba9-455cff85fde1 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-09aaf0b1-5ea6-4ea9-aba9-455cff85fde1');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 7
        }
      ],
      "source": [
        "%time gender = pd.read_csv('gender.csv', index_col='cid'); gender.T  # load gender labels. you need to predict the missing labels\n",
        "tY, vY = gender.query('gender==gender'), gender.query('gender!=gender')  # split into Train and test (=Validation) targets"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 8,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 334
        },
        "id": "7VA1oBPyyxii",
        "outputId": "2988347a-88b4-428d-f222-2aa604e6b474"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "CPU times: user 16.2 s, sys: 1.55 s, total: 17.7 s\n",
            "Wall time: 25.9 s\n"
          ]
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "      0         1         2         3         4        ...   3749573   3749574   3749575   3749576   3749577\n",
              "cid         0         0         0         0         0  ...      8399      8399      8399      8399      8399\n",
              "dt          1         1         2         3         3  ...       450       450       456       456       456\n",
              "tm   00:00:00  00:00:00  22:48:17  00:00:00  00:00:00  ...  00:00:00  00:00:00  17:21:07  18:59:26  19:01:21\n",
              "amt     -1305     -4821    -56156     -3708    -30912  ...    -21877    -43831     89833    247062   -336874\n",
              "mcc        56        56        22        56        65  ...        56        56       123       124        22\n",
              "ttc         4         4        37         4         4  ...         4         4       128       108        25\n",
              "tid       NaN       NaN       NaN       NaN       NaN  ...  25021545  PS026577    888917    738051    738051\n",
              "\n",
              "[7 rows x 3749578 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-f8d07d6b-1b22-4fa0-9e91-a7260c8d839f\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>0</th>\n",
              "      <th>1</th>\n",
              "      <th>2</th>\n",
              "      <th>3</th>\n",
              "      <th>4</th>\n",
              "      <th>...</th>\n",
              "      <th>3749573</th>\n",
              "      <th>3749574</th>\n",
              "      <th>3749575</th>\n",
              "      <th>3749576</th>\n",
              "      <th>3749577</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>cid</th>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>0</td>\n",
              "      <td>...</td>\n",
              "      <td>8399</td>\n",
              "      <td>8399</td>\n",
              "      <td>8399</td>\n",
              "      <td>8399</td>\n",
              "      <td>8399</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>dt</th>\n",
              "      <td>1</td>\n",
              "      <td>1</td>\n",
              "      <td>2</td>\n",
              "      <td>3</td>\n",
              "      <td>3</td>\n",
              "      <td>...</td>\n",
              "      <td>450</td>\n",
              "      <td>450</td>\n",
              "      <td>456</td>\n",
              "      <td>456</td>\n",
              "      <td>456</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>tm</th>\n",
              "      <td>00:00:00</td>\n",
              "      <td>00:00:00</td>\n",
              "      <td>22:48:17</td>\n",
              "      <td>00:00:00</td>\n",
              "      <td>00:00:00</td>\n",
              "      <td>...</td>\n",
              "      <td>00:00:00</td>\n",
              "      <td>00:00:00</td>\n",
              "      <td>17:21:07</td>\n",
              "      <td>18:59:26</td>\n",
              "      <td>19:01:21</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>amt</th>\n",
              "      <td>-1305</td>\n",
              "      <td>-4821</td>\n",
              "      <td>-56156</td>\n",
              "      <td>-3708</td>\n",
              "      <td>-30912</td>\n",
              "      <td>...</td>\n",
              "      <td>-21877</td>\n",
              "      <td>-43831</td>\n",
              "      <td>89833</td>\n",
              "      <td>247062</td>\n",
              "      <td>-336874</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>mcc</th>\n",
              "      <td>56</td>\n",
              "      <td>56</td>\n",
              "      <td>22</td>\n",
              "      <td>56</td>\n",
              "      <td>65</td>\n",
              "      <td>...</td>\n",
              "      <td>56</td>\n",
              "      <td>56</td>\n",
              "      <td>123</td>\n",
              "      <td>124</td>\n",
              "      <td>22</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>ttc</th>\n",
              "      <td>4</td>\n",
              "      <td>4</td>\n",
              "      <td>37</td>\n",
              "      <td>4</td>\n",
              "      <td>4</td>\n",
              "      <td>...</td>\n",
              "      <td>4</td>\n",
              "      <td>4</td>\n",
              "      <td>128</td>\n",
              "      <td>108</td>\n",
              "      <td>25</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>tid</th>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>NaN</td>\n",
              "      <td>...</td>\n",
              "      <td>25021545</td>\n",
              "      <td>PS026577</td>\n",
              "      <td>888917</td>\n",
              "      <td>738051</td>\n",
              "      <td>738051</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>7 rows √ó 3749578 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-f8d07d6b-1b22-4fa0-9e91-a7260c8d839f')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-f8d07d6b-1b22-4fa0-9e91-a7260c8d839f button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-f8d07d6b-1b22-4fa0-9e91-a7260c8d839f');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 8
        }
      ],
      "source": [
        "%time dfTrx = pd.read_csv('trx.csv').sort_values(['cid','dt','tm']); dfTrx.T  # load bank card's transactions. Ensure ordered CID"
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df_ = gender.drop('gender', axis=1); df_.T  # a list of ordered client IDs (as index)"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 79
        },
        "id": "_dbPjpjXSZWj",
        "outputId": "5b13d0d3-a505-49bf-d4fa-ec6b1430bb92"
      },
      "execution_count": 9,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "Empty DataFrame\n",
              "Columns: [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, ...]\n",
              "Index: []\n",
              "\n",
              "[0 rows x 8400 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-8bad48ea-6843-4f67-9ba3-2545013caa7a\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th>cid</th>\n",
              "      <th>0</th>\n",
              "      <th>1</th>\n",
              "      <th>2</th>\n",
              "      <th>3</th>\n",
              "      <th>4</th>\n",
              "      <th>...</th>\n",
              "      <th>8395</th>\n",
              "      <th>8396</th>\n",
              "      <th>8397</th>\n",
              "      <th>8398</th>\n",
              "      <th>8399</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>0 rows √ó 8400 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-8bad48ea-6843-4f67-9ba3-2545013caa7a')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-8bad48ea-6843-4f67-9ba3-2545013caa7a button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-8bad48ea-6843-4f67-9ba3-2545013caa7a');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 9
        }
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 10,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "1l4r_NEyzZ_v",
        "outputId": "6af04926-689b-41b4-b5ed-bbc3e2745df5"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "‚è≥ started. You have 180 sec. Good luck!\n"
          ]
        }
      ],
      "source": [
        "pd.set_option('display.max_colwidth', 100, 'display.max_columns', 20, 'display.width', 1000, 'display.max_rows', 4)\n",
        "tmr = Timer() # runtime limit (in seconds). Add all of your code after the timer"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "Vl15K7562P-n"
      },
      "source": [
        "<hr color=green size=40>\n",
        "\n",
        "<strong><font color=green size=5>‚è≥Timed Green Playground (TGP): Your ideas, documentation, code, and timer START HERE!</font></strong>\n",
        "\n",
        "<font color=green>Students: Keep all your definitions, code, documentation in <b>TGP</b>. Modifying any code outside of TGP incurs penalties."
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "!pip install catboost\n",
        "from catboost import CatBoostClassifier"
      ],
      "metadata": {
        "id": "qI9-EEAK_Rh8",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "45721658-d1ec-4f37-d2a6-8c7790c50665"
      },
      "execution_count": 11,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Collecting catboost\n",
            "  Downloading catboost-1.2-cp310-cp310-manylinux2014_x86_64.whl (98.6 MB)\n",
            "\u001b[2K     \u001b[90m‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\u001b[0m \u001b[32m98.6/98.6 MB\u001b[0m \u001b[31m9.7 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n",
            "\u001b[?25hRequirement already satisfied: graphviz in /usr/local/lib/python3.10/dist-packages (from catboost) (0.20.1)\n",
            "Requirement already satisfied: matplotlib in /usr/local/lib/python3.10/dist-packages (from catboost) (3.7.1)\n",
            "Requirement already satisfied: numpy>=1.16.0 in /usr/local/lib/python3.10/dist-packages (from catboost) (1.22.4)\n",
            "Requirement already satisfied: pandas>=0.24 in /usr/local/lib/python3.10/dist-packages (from catboost) (1.5.3)\n",
            "Requirement already satisfied: scipy in /usr/local/lib/python3.10/dist-packages (from catboost) (1.10.1)\n",
            "Requirement already satisfied: plotly in /usr/local/lib/python3.10/dist-packages (from catboost) (5.15.0)\n",
            "Requirement already satisfied: six in /usr/local/lib/python3.10/dist-packages (from catboost) (1.16.0)\n",
            "Requirement already satisfied: python-dateutil>=2.8.1 in /usr/local/lib/python3.10/dist-packages (from pandas>=0.24->catboost) (2.8.2)\n",
            "Requirement already satisfied: pytz>=2020.1 in /usr/local/lib/python3.10/dist-packages (from pandas>=0.24->catboost) (2022.7.1)\n",
            "Requirement already satisfied: contourpy>=1.0.1 in /usr/local/lib/python3.10/dist-packages (from matplotlib->catboost) (1.1.0)\n",
            "Requirement already satisfied: cycler>=0.10 in /usr/local/lib/python3.10/dist-packages (from matplotlib->catboost) (0.11.0)\n",
            "Requirement already satisfied: fonttools>=4.22.0 in /usr/local/lib/python3.10/dist-packages (from matplotlib->catboost) (4.40.0)\n",
            "Requirement already satisfied: kiwisolver>=1.0.1 in /usr/local/lib/python3.10/dist-packages (from matplotlib->catboost) (1.4.4)\n",
            "Requirement already satisfied: packaging>=20.0 in /usr/local/lib/python3.10/dist-packages (from matplotlib->catboost) (23.1)\n",
            "Requirement already satisfied: pillow>=6.2.0 in /usr/local/lib/python3.10/dist-packages (from matplotlib->catboost) (8.4.0)\n",
            "Requirement already satisfied: pyparsing>=2.3.1 in /usr/local/lib/python3.10/dist-packages (from matplotlib->catboost) (3.1.0)\n",
            "Requirement already satisfied: tenacity>=6.2.0 in /usr/local/lib/python3.10/dist-packages (from plotly->catboost) (8.2.2)\n",
            "Installing collected packages: catboost\n",
            "Successfully installed catboost-1.2\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "<font color=green><h3><b>$\\alpha$. Build statistical features</b><h3>\n",
        "\n",
        "Below we build basic stats from <code>amt</code> attribute. For each CID we compute the mean and count of all of the CID's transaction amounts.</font>"
      ],
      "metadata": {
        "id": "5NwKr8poSF9J"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "stat = ['mean', 'count', \"sum\", \"median\"]\n",
        "df_AmtStatTmp = dfTrx[['cid', 'amt']].groupby('cid').agg(stat).add_prefix('').droplevel(0, axis='columns')  # all available stats (may not be for each cid, if filtered)\n",
        "\n",
        "df_AmtStat = df_.join(df_AmtStatTmp, how='left').fillna(0)        # stats for every cid\n",
        "df_AmtStat.T.round(1)  # numeric input features for train and test sets"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 268
        },
        "id": "UtKtwbnucW2x",
        "outputId": "432482d0-fe77-4843-828b-f350572ee199"
      },
      "execution_count": 12,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "cid           0          1          2           3          4          5          6          7          8         9     ...        8390       8391       8392       8393       8394       8395     8396      8397       8398        8399\n",
              "mean      -12178.3   -21879.2   -13881.7   -340759.0   -11265.8    -4568.5   -59954.6   -31188.8   -80636.2    9742.3  ...   -141089.2   -78514.9   -11345.1   -19479.3   -72313.3    -5613.7  -8341.4   -3036.9   -32332.6    -26416.4\n",
              "count       1005.0      209.0      426.0        78.0      287.0      530.0       80.0       70.0       62.0      77.0  ...       149.0       76.0      631.0      198.0       38.0      444.0      7.0     202.0      118.0       618.0\n",
              "sum    -12239156.0 -4572763.0 -5913610.0 -26579202.0 -3233278.0 -2421304.0 -4796368.0 -2183214.0 -4999444.0  750157.0  ... -21022290.0 -5967134.0 -7158738.0 -3856901.0 -2747906.0 -2492498.0 -58390.0 -613462.0 -3815243.0 -16325352.0\n",
              "median     -5764.0   -10102.0    -4036.5   -122401.5    -6675.0    -4119.5   -22451.5   -22461.5    -1128.5   -4489.0  ...    -58727.0   -67382.5    -9662.0    -4739.0   -16844.0    -2671.0  -8987.0   -2493.5   -11235.5    -11013.5\n",
              "\n",
              "[4 rows x 8400 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-91db58fa-ddf7-4812-acbe-a3e545a06ce2\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th>cid</th>\n",
              "      <th>0</th>\n",
              "      <th>1</th>\n",
              "      <th>2</th>\n",
              "      <th>3</th>\n",
              "      <th>4</th>\n",
              "      <th>5</th>\n",
              "      <th>6</th>\n",
              "      <th>7</th>\n",
              "      <th>8</th>\n",
              "      <th>9</th>\n",
              "      <th>...</th>\n",
              "      <th>8390</th>\n",
              "      <th>8391</th>\n",
              "      <th>8392</th>\n",
              "      <th>8393</th>\n",
              "      <th>8394</th>\n",
              "      <th>8395</th>\n",
              "      <th>8396</th>\n",
              "      <th>8397</th>\n",
              "      <th>8398</th>\n",
              "      <th>8399</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>mean</th>\n",
              "      <td>-12178.3</td>\n",
              "      <td>-21879.2</td>\n",
              "      <td>-13881.7</td>\n",
              "      <td>-340759.0</td>\n",
              "      <td>-11265.8</td>\n",
              "      <td>-4568.5</td>\n",
              "      <td>-59954.6</td>\n",
              "      <td>-31188.8</td>\n",
              "      <td>-80636.2</td>\n",
              "      <td>9742.3</td>\n",
              "      <td>...</td>\n",
              "      <td>-141089.2</td>\n",
              "      <td>-78514.9</td>\n",
              "      <td>-11345.1</td>\n",
              "      <td>-19479.3</td>\n",
              "      <td>-72313.3</td>\n",
              "      <td>-5613.7</td>\n",
              "      <td>-8341.4</td>\n",
              "      <td>-3036.9</td>\n",
              "      <td>-32332.6</td>\n",
              "      <td>-26416.4</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>count</th>\n",
              "      <td>1005.0</td>\n",
              "      <td>209.0</td>\n",
              "      <td>426.0</td>\n",
              "      <td>78.0</td>\n",
              "      <td>287.0</td>\n",
              "      <td>530.0</td>\n",
              "      <td>80.0</td>\n",
              "      <td>70.0</td>\n",
              "      <td>62.0</td>\n",
              "      <td>77.0</td>\n",
              "      <td>...</td>\n",
              "      <td>149.0</td>\n",
              "      <td>76.0</td>\n",
              "      <td>631.0</td>\n",
              "      <td>198.0</td>\n",
              "      <td>38.0</td>\n",
              "      <td>444.0</td>\n",
              "      <td>7.0</td>\n",
              "      <td>202.0</td>\n",
              "      <td>118.0</td>\n",
              "      <td>618.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>sum</th>\n",
              "      <td>-12239156.0</td>\n",
              "      <td>-4572763.0</td>\n",
              "      <td>-5913610.0</td>\n",
              "      <td>-26579202.0</td>\n",
              "      <td>-3233278.0</td>\n",
              "      <td>-2421304.0</td>\n",
              "      <td>-4796368.0</td>\n",
              "      <td>-2183214.0</td>\n",
              "      <td>-4999444.0</td>\n",
              "      <td>750157.0</td>\n",
              "      <td>...</td>\n",
              "      <td>-21022290.0</td>\n",
              "      <td>-5967134.0</td>\n",
              "      <td>-7158738.0</td>\n",
              "      <td>-3856901.0</td>\n",
              "      <td>-2747906.0</td>\n",
              "      <td>-2492498.0</td>\n",
              "      <td>-58390.0</td>\n",
              "      <td>-613462.0</td>\n",
              "      <td>-3815243.0</td>\n",
              "      <td>-16325352.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>median</th>\n",
              "      <td>-5764.0</td>\n",
              "      <td>-10102.0</td>\n",
              "      <td>-4036.5</td>\n",
              "      <td>-122401.5</td>\n",
              "      <td>-6675.0</td>\n",
              "      <td>-4119.5</td>\n",
              "      <td>-22451.5</td>\n",
              "      <td>-22461.5</td>\n",
              "      <td>-1128.5</td>\n",
              "      <td>-4489.0</td>\n",
              "      <td>...</td>\n",
              "      <td>-58727.0</td>\n",
              "      <td>-67382.5</td>\n",
              "      <td>-9662.0</td>\n",
              "      <td>-4739.0</td>\n",
              "      <td>-16844.0</td>\n",
              "      <td>-2671.0</td>\n",
              "      <td>-8987.0</td>\n",
              "      <td>-2493.5</td>\n",
              "      <td>-11235.5</td>\n",
              "      <td>-11013.5</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>4 rows √ó 8400 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-91db58fa-ddf7-4812-acbe-a3e545a06ce2')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-91db58fa-ddf7-4812-acbe-a3e545a06ce2 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-91db58fa-ddf7-4812-acbe-a3e545a06ce2');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 12
        }
      ]
    },
    {
      "cell_type": "code",
      "source": [
        "df_mccdummies = pd.get_dummies(dfTrx, columns=['mcc'], drop_first = True).drop(['dt', 'tm', 'amt', 'ttc', 'tid'], axis=1)\n",
        "df_mccdummies = df_mccdummies.groupby('cid').mean(); df_mccdummies"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 331
        },
        "id": "3cWUtLM1LYIc",
        "outputId": "2dc3396f-cb42-4f16-912f-8e3f2b558ad9"
      },
      "execution_count": 13,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "      mcc_1  mcc_2  mcc_3  mcc_4  mcc_5  mcc_6  mcc_7  mcc_8  mcc_9  mcc_10  ...  mcc_174  mcc_175  mcc_176  mcc_177  mcc_178  mcc_179  mcc_180  mcc_181  mcc_182  mcc_183\n",
              "cid                                                                          ...                                                                                          \n",
              "0       0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0     0.0  ...      0.0      0.0      0.0      0.0  0.00199      0.0      0.0      0.0      0.0      0.0\n",
              "1       0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0     0.0  ...      0.0      0.0      0.0      0.0  0.00000      0.0      0.0      0.0      0.0      0.0\n",
              "...     ...    ...    ...    ...    ...    ...    ...    ...    ...     ...  ...      ...      ...      ...      ...      ...      ...      ...      ...      ...      ...\n",
              "8398    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0     0.0  ...      0.0      0.0      0.0      0.0  0.00000      0.0      0.0      0.0      0.0      0.0\n",
              "8399    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0    0.0     0.0  ...      0.0      0.0      0.0      0.0  0.00000      0.0      0.0      0.0      0.0      0.0\n",
              "\n",
              "[8400 rows x 183 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-0ac562a3-8b82-4595-9c28-fe0a9aecd131\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>mcc_1</th>\n",
              "      <th>mcc_2</th>\n",
              "      <th>mcc_3</th>\n",
              "      <th>mcc_4</th>\n",
              "      <th>mcc_5</th>\n",
              "      <th>mcc_6</th>\n",
              "      <th>mcc_7</th>\n",
              "      <th>mcc_8</th>\n",
              "      <th>mcc_9</th>\n",
              "      <th>mcc_10</th>\n",
              "      <th>...</th>\n",
              "      <th>mcc_174</th>\n",
              "      <th>mcc_175</th>\n",
              "      <th>mcc_176</th>\n",
              "      <th>mcc_177</th>\n",
              "      <th>mcc_178</th>\n",
              "      <th>mcc_179</th>\n",
              "      <th>mcc_180</th>\n",
              "      <th>mcc_181</th>\n",
              "      <th>mcc_182</th>\n",
              "      <th>mcc_183</th>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>cid</th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "      <th></th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>...</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.00199</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>...</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.00000</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8398</th>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>...</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.00000</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>8399</th>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>...</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.00000</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>8400 rows √ó 183 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-0ac562a3-8b82-4595-9c28-fe0a9aecd131')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-0ac562a3-8b82-4595-9c28-fe0a9aecd131 button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-0ac562a3-8b82-4595-9c28-fe0a9aecd131');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 13
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "<font color=green><H4><b>$\\gamma$. Combine all features</b></H2>\n",
        "</font>\n",
        "\n",
        "<font color=green>Next we combine statistical and embedding features.</font>"
      ],
      "metadata": {
        "id": "u8P07Y2jDcrU"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "df_Combo = df_AmtStat.join(df_mccdummies); df_Combo.round(1).T\n",
        "df_Combo.columns = [str(c) for c in df_Combo.columns]  # logistic regression requires string column names"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 299
        },
        "id": "QA_7D09zUIF9",
        "outputId": "7582f078-9549-4467-cc7c-9c8bb1807187"
      },
      "execution_count": 14,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "cid         0        1        2         3        4       5        6        7        8       9     ...      8390     8391     8392     8393     8394    8395    8396    8397     8398     8399\n",
              "mean    -12178.3 -21879.2 -13881.7 -340759.0 -11265.8 -4568.5 -59954.6 -31188.8 -80636.2  9742.3  ... -141089.2 -78514.9 -11345.1 -19479.3 -72313.3 -5613.7 -8341.4 -3036.9 -32332.6 -26416.4\n",
              "count     1005.0    209.0    426.0      78.0    287.0   530.0     80.0     70.0     62.0    77.0  ...     149.0     76.0    631.0    198.0     38.0   444.0     7.0   202.0    118.0    618.0\n",
              "...          ...      ...      ...       ...      ...     ...      ...      ...      ...     ...  ...       ...      ...      ...      ...      ...     ...     ...     ...      ...      ...\n",
              "mcc_182      0.0      0.0      0.0       0.0      0.0     0.0      0.0      0.0      0.0     0.0  ...       0.0      0.0      0.0      0.0      0.0     0.0     0.0     0.0      0.0      0.0\n",
              "mcc_183      0.0      0.0      0.0       0.0      0.0     0.0      0.0      0.0      0.0     0.0  ...       0.0      0.0      0.0      0.0      0.0     0.0     0.0     0.0      0.0      0.0\n",
              "\n",
              "[187 rows x 8400 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-3ca62505-b0ce-400c-a6c1-3d8ef2cdab5e\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th>cid</th>\n",
              "      <th>0</th>\n",
              "      <th>1</th>\n",
              "      <th>2</th>\n",
              "      <th>3</th>\n",
              "      <th>4</th>\n",
              "      <th>5</th>\n",
              "      <th>6</th>\n",
              "      <th>7</th>\n",
              "      <th>8</th>\n",
              "      <th>9</th>\n",
              "      <th>...</th>\n",
              "      <th>8390</th>\n",
              "      <th>8391</th>\n",
              "      <th>8392</th>\n",
              "      <th>8393</th>\n",
              "      <th>8394</th>\n",
              "      <th>8395</th>\n",
              "      <th>8396</th>\n",
              "      <th>8397</th>\n",
              "      <th>8398</th>\n",
              "      <th>8399</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>mean</th>\n",
              "      <td>-12178.3</td>\n",
              "      <td>-21879.2</td>\n",
              "      <td>-13881.7</td>\n",
              "      <td>-340759.0</td>\n",
              "      <td>-11265.8</td>\n",
              "      <td>-4568.5</td>\n",
              "      <td>-59954.6</td>\n",
              "      <td>-31188.8</td>\n",
              "      <td>-80636.2</td>\n",
              "      <td>9742.3</td>\n",
              "      <td>...</td>\n",
              "      <td>-141089.2</td>\n",
              "      <td>-78514.9</td>\n",
              "      <td>-11345.1</td>\n",
              "      <td>-19479.3</td>\n",
              "      <td>-72313.3</td>\n",
              "      <td>-5613.7</td>\n",
              "      <td>-8341.4</td>\n",
              "      <td>-3036.9</td>\n",
              "      <td>-32332.6</td>\n",
              "      <td>-26416.4</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>count</th>\n",
              "      <td>1005.0</td>\n",
              "      <td>209.0</td>\n",
              "      <td>426.0</td>\n",
              "      <td>78.0</td>\n",
              "      <td>287.0</td>\n",
              "      <td>530.0</td>\n",
              "      <td>80.0</td>\n",
              "      <td>70.0</td>\n",
              "      <td>62.0</td>\n",
              "      <td>77.0</td>\n",
              "      <td>...</td>\n",
              "      <td>149.0</td>\n",
              "      <td>76.0</td>\n",
              "      <td>631.0</td>\n",
              "      <td>198.0</td>\n",
              "      <td>38.0</td>\n",
              "      <td>444.0</td>\n",
              "      <td>7.0</td>\n",
              "      <td>202.0</td>\n",
              "      <td>118.0</td>\n",
              "      <td>618.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>mcc_182</th>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>...</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>mcc_183</th>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>...</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "      <td>0.0</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>187 rows √ó 8400 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-3ca62505-b0ce-400c-a6c1-3d8ef2cdab5e')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-3ca62505-b0ce-400c-a6c1-3d8ef2cdab5e button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-3ca62505-b0ce-400c-a6c1-3d8ef2cdab5e');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 14
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "<font color=green><H4><b>$\\delta$. Score your model locally</b></H2>\n",
        "</font>\n",
        "\n",
        "<font color=green>Next we train the model on a subsample and test on the rest of the labeled observations. This is only needed to evaluate model performance locally, i.e. without sending the test set to the public LB.</font>"
      ],
      "metadata": {
        "id": "0j71178aC94j"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "%%time\n",
        "#np.random.seed(0)   # if needed remember to seed all RNG !!! Experiments must be reproducible\n",
        "tX, vX = df_Combo.join(tY.drop('gender', axis=1), how='inner'), df_Combo.join(vY.drop('gender', axis=1), how='inner') # split observations into train/test\n",
        "tX0, vX0, tY0, vY0 = train_test_split(tX, tY, test_size=0.3, random_state=0) # split train observation into local train/test sets (to score performance)\n",
        "clf = CatBoostClassifier(learning_rate=0.06631796388032563, iterations=1000, logging_level='Silent')\n",
        "clf.fit(tX0, tY0.gender)\n",
        "print('Local AUC ROC', roc_auc_score(vY0.gender, clf.predict_proba(vX0)[:, 1]))"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "7qCbTOOG9zVf",
        "outputId": "5aa26473-1219-4943-c9d8-71f5738f6470"
      },
      "execution_count": 15,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Local AUC ROC 0.8537268518518518\n",
            "CPU times: user 46.7 s, sys: 827 ms, total: 47.5 s\n",
            "Wall time: 39.7 s\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "<font color=green><H4><b>$\\gamma$. Fully retrain your model and save predicted test clients' genders</b></H2></font>\n",
        "\n",
        "<font color=green>Next we train the model on the full training set and build our final predictions from this fitted model (to submit to Kaggle).</font>"
      ],
      "metadata": {
        "id": "a05ryj4yDSaW"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "clf.fit(tX, tY.gender)  # now train again, on the full training set\n",
        "pY = pd.DataFrame(clf.predict_proba(vX)[:,1], columns=['gender'])\n",
        "pY.index.name = 'cid'\n",
        "pY.reset_index().to_csv('Baseline.csv', index=False, float_format='%.15f')\n",
        "baseline = pd.read_csv(\"Baseline.csv\")\n",
        "baseline"
      ],
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 253
        },
        "id": "rbCq3kBiZnMo",
        "outputId": "2c5ae452-3546-4faa-9c03-eff9873dbf22"
      },
      "execution_count": 16,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "<catboost.core.CatBoostClassifier at 0x7f41e556e140>"
            ]
          },
          "metadata": {},
          "execution_count": 16
        },
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "       cid    gender\n",
              "0        0  0.602361\n",
              "1        1  0.201635\n",
              "...    ...       ...\n",
              "1998  1998  0.386959\n",
              "1999  1999  0.996947\n",
              "\n",
              "[2000 rows x 2 columns]"
            ],
            "text/html": [
              "\n",
              "  <div id=\"df-a9e0372f-ae04-4869-89a9-b79b6d36478c\">\n",
              "    <div class=\"colab-df-container\">\n",
              "      <div>\n",
              "<style scoped>\n",
              "    .dataframe tbody tr th:only-of-type {\n",
              "        vertical-align: middle;\n",
              "    }\n",
              "\n",
              "    .dataframe tbody tr th {\n",
              "        vertical-align: top;\n",
              "    }\n",
              "\n",
              "    .dataframe thead th {\n",
              "        text-align: right;\n",
              "    }\n",
              "</style>\n",
              "<table border=\"1\" class=\"dataframe\">\n",
              "  <thead>\n",
              "    <tr style=\"text-align: right;\">\n",
              "      <th></th>\n",
              "      <th>cid</th>\n",
              "      <th>gender</th>\n",
              "    </tr>\n",
              "  </thead>\n",
              "  <tbody>\n",
              "    <tr>\n",
              "      <th>0</th>\n",
              "      <td>0</td>\n",
              "      <td>0.602361</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1</th>\n",
              "      <td>1</td>\n",
              "      <td>0.201635</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>...</th>\n",
              "      <td>...</td>\n",
              "      <td>...</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1998</th>\n",
              "      <td>1998</td>\n",
              "      <td>0.386959</td>\n",
              "    </tr>\n",
              "    <tr>\n",
              "      <th>1999</th>\n",
              "      <td>1999</td>\n",
              "      <td>0.996947</td>\n",
              "    </tr>\n",
              "  </tbody>\n",
              "</table>\n",
              "<p>2000 rows √ó 2 columns</p>\n",
              "</div>\n",
              "      <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-a9e0372f-ae04-4869-89a9-b79b6d36478c')\"\n",
              "              title=\"Convert this dataframe to an interactive table.\"\n",
              "              style=\"display:none;\">\n",
              "        \n",
              "  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n",
              "       width=\"24px\">\n",
              "    <path d=\"M0 0h24v24H0V0z\" fill=\"none\"/>\n",
              "    <path d=\"M18.56 5.44l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94zm-11 1L8.5 8.5l.94-2.06 2.06-.94-2.06-.94L8.5 2.5l-.94 2.06-2.06.94zm10 10l.94 2.06.94-2.06 2.06-.94-2.06-.94-.94-2.06-.94 2.06-2.06.94z\"/><path d=\"M17.41 7.96l-1.37-1.37c-.4-.4-.92-.59-1.43-.59-.52 0-1.04.2-1.43.59L10.3 9.45l-7.72 7.72c-.78.78-.78 2.05 0 2.83L4 21.41c.39.39.9.59 1.41.59.51 0 1.02-.2 1.41-.59l7.78-7.78 2.81-2.81c.8-.78.8-2.07 0-2.86zM5.41 20L4 18.59l7.72-7.72 1.47 1.35L5.41 20z\"/>\n",
              "  </svg>\n",
              "      </button>\n",
              "      \n",
              "  <style>\n",
              "    .colab-df-container {\n",
              "      display:flex;\n",
              "      flex-wrap:wrap;\n",
              "      gap: 12px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert {\n",
              "      background-color: #E8F0FE;\n",
              "      border: none;\n",
              "      border-radius: 50%;\n",
              "      cursor: pointer;\n",
              "      display: none;\n",
              "      fill: #1967D2;\n",
              "      height: 32px;\n",
              "      padding: 0 0 0 0;\n",
              "      width: 32px;\n",
              "    }\n",
              "\n",
              "    .colab-df-convert:hover {\n",
              "      background-color: #E2EBFA;\n",
              "      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n",
              "      fill: #174EA6;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert {\n",
              "      background-color: #3B4455;\n",
              "      fill: #D2E3FC;\n",
              "    }\n",
              "\n",
              "    [theme=dark] .colab-df-convert:hover {\n",
              "      background-color: #434B5C;\n",
              "      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n",
              "      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n",
              "      fill: #FFFFFF;\n",
              "    }\n",
              "  </style>\n",
              "\n",
              "      <script>\n",
              "        const buttonEl =\n",
              "          document.querySelector('#df-a9e0372f-ae04-4869-89a9-b79b6d36478c button.colab-df-convert');\n",
              "        buttonEl.style.display =\n",
              "          google.colab.kernel.accessAllowed ? 'block' : 'none';\n",
              "\n",
              "        async function convertToInteractive(key) {\n",
              "          const element = document.querySelector('#df-a9e0372f-ae04-4869-89a9-b79b6d36478c');\n",
              "          const dataTable =\n",
              "            await google.colab.kernel.invokeFunction('convertToInteractive',\n",
              "                                                     [key], {});\n",
              "          if (!dataTable) return;\n",
              "\n",
              "          const docLinkHtml = 'Like what you see? Visit the ' +\n",
              "            '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n",
              "            + ' to learn more about interactive tables.';\n",
              "          element.innerHTML = '';\n",
              "          dataTable['output_type'] = 'display_data';\n",
              "          await google.colab.output.renderOutput(dataTable, element);\n",
              "          const docLink = document.createElement('div');\n",
              "          docLink.innerHTML = docLinkHtml;\n",
              "          element.appendChild(docLink);\n",
              "        }\n",
              "      </script>\n",
              "    </div>\n",
              "  </div>\n",
              "  "
            ]
          },
          "metadata": {},
          "execution_count": 16
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "2kr8Q-9T_nAb"
      },
      "source": [
        "<font color=green><h3><b>$\\epsilon$. References:</b></h3></font>\n",
        "\n",
        "<font color=green> Remember to cite your sources here! List resources that helped you with ideas and code ([articles/books](https://scholar.google.com/), StackOverflow, Wikipedia, etc.)\n",
        "\n",
        "1. https://catboost.ai/en/docs/concepts/python-reference_catboostclassifier\n",
        "1. https://pandas.pydata.org/docs/reference/api/pandas.get_dummies.html\n",
        "1. https://scikit-learn.org/stable/modules/generated/sklearn.ensemble.GradientBoostingClassifier.html\n",
        "</font>"
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "<font color=green><h3><b>$\\zeta$. Documentation: Explain decisions in your process</b></h3></font>"
      ],
      "metadata": {
        "id": "aMVDxm-kEJis"
      }
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "OpyLNt3god0c"
      },
      "source": [
        "<font color=green><h4><b>Task 1. Explain Decisions in Preprocessing Pipeline</b></h4></font>\n",
        "\n",
        "<font color=green>\n",
        "Explain elements of your preprocessing pipeline i.e. feature engineering, subsampling, clustering, dimensionality reduction, etc.</font>\n",
        "\n",
        "<font color=green>\n",
        "\n",
        "1. Why did you choose these elements? (Something in EDA, prior experience,...? Note: EDA is not required)\n",
        "1. How do you evaluate the effectiveness of these elements?\n",
        "1. What else have you tried that worked or didn't?\n",
        "\n",
        "</font>"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "30xYIFXAnaPE"
      },
      "source": [
        "<font color=green><b>Student's answer:</b></font>\n",
        "\n",
        "1. –ú—ã –ø–æ—Å—á–∏—Ç–∞–ª–∏, —á—Ç–æ –∫–æ–¥ –ø–æ–∫—É–ø–∫–∏ —á–∏–ª—å–Ω–æ –≤–ª–∏—è–µ—Ç –Ω–∞ –ø–æ–ª —á–µ–ª–æ–≤–µ–∫–∞\n",
        "2. –ù–∞ –ø—Ä–∞–∫—Ç–∏–∫–µ –ø–æ —Ç–æ—á–Ω–æ—Å—Ç–∏ —Å–∞–º–æ–π –º–æ–¥–µ–ª–∏\n",
        "3. –ú—ã –ø—ã—Ç–∞–ª–∏—Å—å —Ç–∞–∫ –∂–µ —É—á–∏—Ç—ã–≤–∞—Ç—å TTC, –Ω–æ —ç—Ç–æ —Ç–æ–ª—å–∫–æ –ø—É—Ç–∞–ª–æ –º–æ–¥–µ–ª—å"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "KGJRwzqHob4o"
      },
      "source": [
        "<font color=green><h4><b>Task 2. Explain Decisions in Modeling Pipeline</b></h4></font>\n",
        "\n",
        "<font color=green>\n",
        "Explain your modeling approach, i.e. ideas you tried and why you thought they would be helpful.\n",
        "\n",
        "1. How did these decisions guide you in modeling?\n",
        "1. How do you evaluate the effectiveness of these elements?\n",
        "1. What else have you tried that worked or didn't?\n",
        "\n",
        "</font>"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "zi6ZjgtWnb58"
      },
      "source": [
        "<font color=green><b>Student's answer:</b></font>\n",
        "\n",
        "–ú—ã –ø—ã—Ç–∞–ª–∏—Å—å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å Random Forest –∏ Gradient Boosting, –Ω–æ –æ–Ω–∏ –æ–∫–∞–∑–∞–ª–∏—Å—å –º–µ–Ω–µ–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω—ã"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "DoF2GoB_QGw9"
      },
      "source": [
        "<font size=5>‚åõ</font> <strong><font color=green size=5>Do not exceed competition's runtime limit! Do not write code outside TGP</font></strong>\n",
        "<hr color=green size=40>"
      ]
    },
    {
      "cell_type": "code",
      "execution_count": 17,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "nosV1OWFJPx5",
        "outputId": "e928c7e7-a8db-495c-f535-50258e2949d9"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Runtime is 112 sec\n"
          ]
        }
      ],
      "source": [
        "tmr.ShowTime()    # measure Colab's runtime. Do not remove. Keep as the last cell in your notebook."
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "udpl5HJ4JSLr"
      },
      "source": [
        "# üí°**Starter Ideas**"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "_KOCCeay2r6G"
      },
      "source": [
        "1. Tune hyperparameters of the starter model\n",
        "  1. Different model parameters, different PC count\n",
        "  1. Different [SBERT model](https://www.sbert.net/docs/pretrained_models.html#model-overview) (trained on Russian text similar to mcc labels, balance speed and vector size).\n",
        "    1. If SBERT slows down experimentation, comment it out or ideate faster embedding\n",
        "      1. Note: SBERT is 10-100x faster on GPU (vs CPU), which is allocated, if available\n",
        "      1. To speed up embedding, preprocess `mcc` descriptions and remove [stop wors](https://en.wikipedia.org/wiki/Stop_word)\n",
        "1. More stat features:\n",
        "  1. For each CID, try more [stats](https://pandas.pydata.org/docs/reference/api/pandas.DataFrame.aggregate.html) for `amt` and/or other columns\n",
        "    1. [Stepwise feature selection](https://hastie.su.domains/ISLR2/ISLRv2_website.pdf#page=237): try new features **one-by one** (not all at once) and keep those that raise AUC (locally or on LB).\n",
        "  1. For each CID, try stats for positive amounts and statistics for negative amounts separately.\n",
        "1. More date/time features:\n",
        "  1. Try weekday counters for each client (suppose day=0,7,14,... are mondays)\n",
        "  1. Try 24 hour counters\n",
        "  1. Try binary day or night indicator\n",
        "  1. Try work_hours (on weekdays) or non_work_hours indicators\n",
        "1. More features from categorical attributes:\n",
        "  1. Try none or a different [dimension reduction approach](https://cmdlinetips.com/2022/08/7-dimensionality-reduction-techniques-by-examples-in-python/) (and [more](https://machinelearningmastery.com/dimensionality-reduction-algorithms-with-python/))\n",
        "  1. Try embedding `mcc` descriptions in `mcc` table, then joining the resulting (possibly compressed) vectors with `dfTrx` and building stats on resulting numeric features while grouping by `cid`\n",
        "  1. Try embedding `ttc` text features similarly to `mcc`\n",
        "  1. Try one-hot encodings for categorical features or you can use ordinal encodings if you observe ordinal dependence in categorical features\n",
        "    1. EDA helps to detect dependence between features and target\n",
        "  1. Look at MCC and TTC code descriptions to ideate their relation to gender (e.g. barplots).\n",
        "1. More feature transforms:\n",
        "  1. Try adding transformed features from existing numeric features: [`PolynomialFeatures`](https://scikit-learn.org/stable/modules/generated/sklearn.preprocessing.PolynomialFeatures.html), root, log, interactions, ...\n",
        "1. Frequency features (to detect cycles in sequences):\n",
        "  1. Try converting variable-length `amt` sequences (per each `cid`) to equal-length spectral domain using [DFT](https://docs.scipy.org/doc/scipy/reference/generated/scipy.linalg.dft.html)\n",
        "  1. Same can be tried for time-between-transactions variable or time-since-midnight variable\n",
        "  1. DFT assumes equispaced observations (with equal time intervals), i.e. constant sampling rate. So, try ensuring this with aggregate functions. For example, compute average amt per hour (possibly constant or interpolated over periods of no activity, such as night).\n",
        "1. More complex models\n",
        "  1. Try randomforest (RF), xgboost, lightgbm, stacking, neural networks (NN)\n",
        "    1. Some of these models can produce feature importance\n",
        "      1. Too many features tend to produce unstable coefficients, and, hence, predictions\n",
        "1. Try sampling:\n",
        "  1. In local experiments try [group split](https://scikit-learn.org/stable/modules/generated/sklearn.model_selection.GroupShuffleSplit.html) to keep all transactions of a single `cid` in either local train or local test set, but not in both (to avoid [leakage](https://en.wikipedia.org/wiki/Leakage_(machine_learning)))\n",
        "  1. Subsampling can help speed up experimentation, but try keeping it \"representative\" of the original distribution of inputs/outputs\n",
        "1. Try [balancing dataset](https://www.kdnuggets.com/2017/06/7-techniques-handle-imbalanced-data.html) or picking the balance-invariant model, if target classes are imbalanced\n",
        "1. You can speed up your final model by disabling local testing/scoring."
      ]
    },
    {
      "cell_type": "code",
      "source": [],
      "metadata": {
        "id": "GQ6jA1PI6AY_"
      },
      "execution_count": 17,
      "outputs": []
    }
  ],
  "metadata": {
    "colab": {
      "provenance": [],
      "gpuType": "T4",
      "include_colab_link": true
    },
    "kernelspec": {
      "display_name": "Python 3",
      "name": "python3"
    },
    "language_info": {
      "name": "python"
    },
    "accelerator": "GPU"
  },
  "nbformat": 4,
  "nbformat_minor": 0
}